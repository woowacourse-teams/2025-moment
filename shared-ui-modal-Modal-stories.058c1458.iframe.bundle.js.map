{"version":3,"file":"shared-ui-modal-Modal-stories.058c1458.iframe.bundle.js","mappings":";;AAkIA;AACA;;;;;AAKA;AACA;;AC3HA;;;;AC6CA;AACA;AACA;AACA;;AAEA;AAEA;AAGA;;;;;;;AAOA;AACA;;;;AAMA;;;;;;AAMA;;AAIA;;;AAGA;;AAIA;;;;;;AAQA;;;;;;ACrFA;ACdA","sources":["webpack://client/./src/shared/ui/button/Button.styles.ts","webpack://client/./src/shared/ui/button/Button.tsx","webpack://client/./src/shared/ui/modal/Modal.styles.ts","webpack://client/./src/shared/ui/simpleCard/SimpleCard.styles.ts","webpack://client/./src/shared/ui/simpleCard/SimpleCard.tsx"],"sourcesContent":["import { CustomTheme } from '@/app/styles/theme';\nimport styled from '@emotion/styled';\n\nexport type ButtonVariant = 'primary' | 'secondary' | 'tertiary' | 'quaternary' | 'quinary';\nexport type ExternalVariant = (theme: CustomTheme) => string;\n\nconst buttonStyles = {\n  primary: (theme: CustomTheme) => `\n    background-color: transparent;\n    color: #fff;\n    border: 1px solid ${theme.colors['slate-700']};\n    border-radius: 50px;\n    padding: 10px 20px;\n    font-size: 16px;\n    font-weight: 600;\n    white-space: nowrap;\n\n    &:hover {\n        transform: scale(1.05);\n        transition: transform 0.3s ease;\n    }\n\n    @media (max-width: 768px) {\n        padding: 8px 16px;\n        font-size: 14px;\n    }\n    `,\n\n  secondary: (theme: CustomTheme) => `\n    background-color: ${theme.colors['yellow-500']};\n    color: black;\n    padding: 18px 30px;\n    border-radius: 50px;\n    font-size: 24px;\n    font-weight: bold;\n    transition: all 0.3s ease;\n\n    @media (max-width: 768px) {\n        padding: 16px 24px;\n        font-size: 20px;\n    }\n\n    @media (max-width: 480px) {\n        padding: 14px 20px;\n        font-size: 18px;\n    }\n\n    &:hover {\n        filter: brightness(1.1);\n        box-shadow: 0 0 20px rgba(255, 255, 255, 0.3);\n        transform: translateY(-2px);\n    }\n    `,\n\n  tertiary: (theme: CustomTheme) => `\n    background-color: ${theme.colors['yellow-500']};\n    color: black;\n    padding: 10px 20px;\n    border-radius: 5px;\n    font-size: 1.1rem;\n    font-weight: bold;\n    display: flex;\n    align-items: center;\n    gap: 10px;\n    transition: all 0.3s ease;\n\n    @media (max-width: 768px) {\n        padding: 16px 24px;\n    }\n\n    @media (max-width: 480px) {\n        padding: 14px 20px;\n        font-size: 1rem;\n    }\n\n    &:hover {\n        filter: brightness(1.1);\n        box-shadow: 0 0 20px rgba(255, 255, 255, 0.3);\n        transform: translateY(-2px);\n    }\n    `,\n\n  quaternary: (theme: CustomTheme) => `\n    background-color: transparent;\n    color: ${theme.colors['gray-200']};\n    border: 1px solid ${theme.colors['slate-700']};\n    padding: 10px 20px;\n    border-radius: 50px;\n    font-size: 16px;\n\n    @media (max-width: 1024px) {\n      padding: 8px 16px;\n      font-size: 14px;\n    }\n\n    @media (max-width: 768px) {\n      padding: 4px 10px;\n      font-size: 12px;\n    \n      &:hover {\n        filter: brightness(1.1);\n        box-shadow: 0 0 20px rgba(255, 255, 255, 0.3);\n        transform: translateY(-2px);\n    }\n    }\n  `,\n\n  quinary: (theme: CustomTheme) => `\n    background-color: ${theme.colors['yellow-300']};\n    color: ${theme.colors['slate-700']};\n    border: 1px solid ${theme.colors['slate-700']};\n    padding: 10px 20px;\n    border-radius: 50px;\n    font-size: 16px;\n\n    @media (max-width: 1024px) {\n      padding: 8px 16px;\n      font-size: 14px;\n    }\n\n    @media (max-width: 768px) {\n      padding: 4px 10px;\n      font-size: 12px;\n    }`,\n};\n\nexport const Button = styled.button<{\n  variant: ButtonVariant;\n  externalVariant?: ExternalVariant;\n}>`\n  ${({ theme, variant }) => buttonStyles[variant](theme)};\n  ${({ theme, externalVariant }) => externalVariant && externalVariant(theme)};\n\n  &:disabled {\n    cursor: not-allowed;\n    transform: none;\n    color: ${({ theme }) => theme.colors['slate-700']};\n    border: 1px solid ${({ theme }) => theme.colors['slate-700']};\n  }\n`;\n","import { LucideIcon } from 'lucide-react';\nimport * as S from './Button.styles';\nimport { ButtonVariant, ExternalVariant } from './Button.styles';\n\ninterface ButtonProps extends React.HTMLAttributes<HTMLButtonElement> {\n  variant?: ButtonVariant;\n  externalVariant?: ExternalVariant;\n  title: string;\n  onClick?: () => void;\n  disabled?: boolean;\n  Icon?: LucideIcon;\n  type?: 'button' | 'submit' | 'reset';\n}\n\nexport const Button = ({\n  variant = 'primary',\n  externalVariant,\n  title,\n  onClick,\n  disabled,\n  Icon,\n  type = 'button',\n  ...props\n}: ButtonProps) => {\n  return (\n    <S.Button\n      variant={variant}\n      externalVariant={externalVariant}\n      onClick={onClick}\n      disabled={disabled}\n      type={type}\n      {...props}\n    >\n      {Icon && <Icon size={16} />}\n      {title}\n    </S.Button>\n  );\n};\n","import { CustomTheme } from '@/app/styles/theme';\nimport styled from '@emotion/styled';\n\nexport type ModalVariant = 'default' | 'memoji';\nexport type ModalSize = 'small' | 'medium' | 'large';\nexport type ModalPosition = 'center' | 'bottom';\nexport type ExternalModalVariant = (theme: CustomTheme) => string;\n\nconst modalFrameStyles = {\n  default: (\n    theme: CustomTheme,\n    props: { $size: ModalSize; $position: ModalPosition; $height?: string },\n  ) => `\n    background-color: ${theme.colors['slate-800']};\n    border-radius: 10px;\n    border: 1px solid ${theme.colors['gray-700']};\n    padding: 20px 30px;\n    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);\n    width: ${props.$position === 'center' ? theme.typography.modalWidth[props.$size].desktop : '100%'};\n    height: ${props.$height || 'auto'};\n\n    ${theme.mediaQueries.tablet} {\n      padding: 16px 24px;\n      width: ${props.$position === 'center' ? theme.typography.modalWidth[props.$size].tablet : '100%'};\n    }\n    \n    ${theme.mediaQueries.mobile} {\n      padding: 12px 20px;\n      width: ${props.$position === 'center' ? theme.typography.modalWidth[props.$size].mobile : '100%'};\n    }\n  `,\n\n  memoji: (theme: CustomTheme) => `\n    background-color: ${theme.colors['slate-800']};\n    border-radius: 10px;\n    border: 1px solid ${theme.colors['gray-700']};\n    padding: 20px 30px;\n    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);\n\n    width: 520px;\n    height: 520px;\n    \n    ${theme.mediaQueries.mobile} {\n      padding: 16px 28px;\n      width: 90%;\n    }\n  `,\n};\n\nexport const ModalFrame = styled.div<{\n  $position: 'center' | 'bottom';\n  $size: 'small' | 'medium' | 'large';\n  $height?: string;\n  variant: ModalVariant;\n  externalVariant?: ExternalModalVariant;\n}>`\n  display: flex;\n  flex-direction: column;\n  gap: 15px;\n  position: ${({ $position }) => ($position === 'center' ? 'relative' : 'fixed')};\n  bottom: ${({ $position }) => ($position === 'bottom' ? '0' : 'auto')};\n  left: ${({ $position }) => ($position === 'bottom' ? '50%' : 'auto')};\n  transform: ${({ $position }) => ($position === 'bottom' ? 'translateX(-50%)' : 'none')};\n\n  ${({ theme, variant, $size, $position, $height }) =>\n    modalFrameStyles[variant](theme, { $size, $position, $height })};\n  ${({ theme, externalVariant }) => externalVariant && externalVariant(theme)};\n`;\n\nexport const ModalWrapper = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  position: fixed;\n  width: 100dvw;\n  height: 100dvh;\n  background-color: ${({ theme }) => theme.colors.black_70};\n  color: ${({ theme }) => theme.colors.white};\n  z-index: 1000;\n  left: 0;\n  top: 0;\n`;\n\nexport const ModalCloseButton = styled.button`\n  width: 30px;\n  height: 30px;\n  border-radius: 50%;\n\n  &:hover {\n    background-color: ${({ theme }) => theme.colors['gray-700']};\n  }\n`;\n\nexport const ModalHeader = styled.div<{ $hasTitle: boolean }>`\n  display: flex;\n  width: 100%;\n  justify-content: ${({ $hasTitle }) => ($hasTitle ? 'space-between' : 'right')};\n  align-items: center;\n`;\n\nexport const ModalContent = styled.div`\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n  gap: 10px;\n  overflow-y: auto;\n`;\n\nexport const ModalFooter = styled.div`\n  display: flex;\n  /* width: 100%; */\n  justify-content: flex-end;\n  gap: 10px;\n`;\n","import { CustomTheme } from '@/app/styles/theme';\nimport styled from '@emotion/styled';\n\nexport type SimpleCardHeight = 'small' | 'medium' | 'large';\nexport type ColorKey = keyof CustomTheme['colors'];\n\nconst SimpleCardStyles = {\n  simpleCard: (theme: CustomTheme, $height: SimpleCardHeight, $backgroundColor?: ColorKey) => `\n    display: flex;\n    width: 100%;\n    padding: 10px 16px;\n    background-color: ${$backgroundColor ? theme.colors[$backgroundColor] : theme.colors['gray-600_20']};\n    border-radius: 5px;\n    min-height: ${theme.typography.textAreaHeight[$height]};\n    color: ${theme.colors['gray-200']};\n    border: 1px solid ${theme.colors['gray-700']};\n    word-break: break-all;\n    overflow-wrap: break-word;\n    white-space: pre-wrap;\n    `,\n};\n\nexport const SimpleCard = styled.div<{ $height: SimpleCardHeight; $backgroundColor?: ColorKey }>`\n  ${({ theme, $height, $backgroundColor }) =>\n    SimpleCardStyles.simpleCard(theme, $height, $backgroundColor)}\n`;\n","import { SimpleCardHeight, ColorKey } from './SimpleCard.styles';\nimport * as S from './SimpleCard.styles';\n\ninterface SimpleCardProps {\n  height: SimpleCardHeight;\n  content: React.ReactNode;\n  backgroundColor?: ColorKey;\n}\n\nexport const SimpleCard = ({ height, content, backgroundColor }: SimpleCardProps) => {\n  return (\n    <S.SimpleCard $height={height} $backgroundColor={backgroundColor}>\n      {content}\n    </S.SimpleCard>\n  );\n};\n"],"names":[],"sourceRoot":""}