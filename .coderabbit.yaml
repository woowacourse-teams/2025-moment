# ---------------------------------------------------------------- #
# AI 기본 설정 (언어 및 페르소나)
# ---------------------------------------------------------------- #

# AI가 응답할 때 사용할 기본 언어를 설정합니다. (예: ko-KR, en-US)
language: ko-KR
# AI의 페르소나와 응답 톤앤매너를 상세하게 지시합니다. 최대 200자까지 작성할 수 있습니다.
tone_instructions: >
  당신은 '우아한테크코스'의 코치입니다. 목표는 우테코 크루들이 코드 품질을 개선하며 성장하도록 돕는 것입니다.
  1. 피드백은 명확하고 구체적이어야 하며, 문제의 원인과 개선 방법을 반드시 제시하세요.
  2. 리뷰는 교육적이어야 하며, 관련 개념이나 공식 문서를 함께 추천하세요.
  3. 비판보다는 개선 중심의 제안을 우선하세요.
  4. 칭찬은 짧고 위트 있게 작성하세요.

# ---------------------------------------------------------------- #
# 코드 리뷰 기능 세부 설정
# ---------------------------------------------------------------- #
reviews:
  # 리뷰의 전반적인 스타일을 설정합니다. 'chill'은 비교적 덜 엄격하고 부드러운 톤을 의미합니다.
  profile: chill
  # CodeRabbit의 코멘트를 모두 `resolve`하면, 자동으로 Approve를 하는 기능입니다.
  # PR은 2명의 리뷰어의 Approve 후 가능하다는 팀 컨벤션이 있기 때문에 false로 설정했습니다.
  request_changes_workflow: false
  # PR의 전체적인 변경 사항에 대한 고수준의 요약(summary)을 생성할지 여부입니다.
  high_level_summary: true
  # 변경된 각 파일에 대한 요약을 생성할지 여부입니다.
  # PR이 너무 길어지는 것을 방지하기 위해 비활성화했습니다.
  changed_files_summary: false
  # 코드의 실행 흐름을 보여주는 시퀀스 다이어그램을 생성할지 여부입니다.
  # PR이 너무 길어지는 것을 방지하기 위해 비활성화했습니다.
  sequence_diagrams: false
  # PR에 연결된 이슈(Issue)를 분석하여 리뷰 컨텍스트에 활용할지 여부입니다.
  assess_linked_issues: true
  # 연관된 다른 이슈를 찾아서 링크할지 여부입니다.
  related_issues: false
  # 연관된 다른 PR을 찾아서 링크할지 여부입니다.
  related_prs: false
  # PR에 적절한 레이블(e.g., 'bug', 'enhancement')을 제안할지 여부입니다.
  suggested_labels: false
  # 제안된 레이블을 자동으로 PR에 적용할지 여부입니다.
  auto_apply_labels: false
  # 이 PR을 리뷰할 만한 적절한 동료 리뷰어를 추천할지 여부입니다.
  suggested_reviewers: false
  # 추천된 리뷰어를 자동으로 할당할지 여부입니다.
  auto_assign_reviewers: false
  # 리뷰 요약에 위트 있는 시(poem)를 포함할지 여부입니다.
  # 몇몇 팀원들의 반대가 있었지만, CodeRabbit이 써주는 시가 귀여워서 개인 취향으로 강력 주장해서 활성화시켰습니다.
  poem: true
  # 특정 파일 경로에 따라 다른 리뷰 지침을 적용합니다.
  # 모노레포를 사용하는 프로젝트였기 때문에 각 분야마다 다른 인스트럭션을 작성했습니다.
  path_instructions:
    - path: server/**
      instructions: |
        1. 팀 및 공식 컨벤션(docs/be-code-convention.md), 가독성, 예외처리, 테스트/확장/유지보수성, 모듈화, API/DB/보안 설계 기준을 기반으로 리뷰해주세요.
        2. 객체지향, 최신 트렌드, 불필요한 로직, 클린코드, 리팩토링, 서비스/도메인 설계, 공통 예외 처리, 확장성도 함께 확인해주세요.
        3. 각 리뷰 포인트별로 문제점과 대안, 장단점을 논리적으로 제시하고, 필요한 경우 예시 코드도 추가해 주세요.
        4. 리뷰가 너무 많아서 피로감을 줄 수 있으니, 꼭 필요한 부분에 집중해주고, 나머지는 캡션으로 설명해주세요.
        5. 리뷰 남겨주는 부분은 해당 라인 범위의 코멘트에 작성해주세요.
        6. 미작성한 테스트 코드 케이스가 있다면, 어떤 테스트가 필요한지 제안해주세요. (예: API 테스트, Service 단위 테스트, Repository 단위 테스트)

  # ---------------------------------------------------------------- #
  # 자동 리뷰 트리거 설정
  # ---------------------------------------------------------------- #
  auto_review:
    # PR이 생성됐을 때
    # `@coderabbitai review`를 코멘트에 입력하면 리뷰를 시작합니다.
    enabled: false
    # 이미 리뷰가 진행된 PR에 새로운 커밋이 추가될 때, 변경된 부분에 대해서만 자동으로 리뷰를 진행할지 여부입니다.
    auto_incremental_review: false

# ---------------------------------------------------------------- #
# 채팅 기능 설정
# ---------------------------------------------------------------- #
chat:
  # 사용자가 @coderabbitai 태그를 지정하지 않아도 자동으로 답글을 달 수 있도록 설정합니다.
  auto_reply: true

# ---------------------------------------------------------------- #
# CodeRabbit의 지식 기반(Knowledge Base) 설정
# ---------------------------------------------------------------- #
knowledge_base:
  # 웹 검색을 통해 최신 정보나 문서를 참조할 수 있도록 허용할지 여부입니다.
  web_search:
    enabled: true
  # 레포지토리 내의 특정 파일을 AI의 코드 스타일 가이드라인으로 사용하도록 설정합니다.
  code_guidelines:
    enabled: true
    filePatterns:
      - docs/be-code-convention.md
  # CodeRabbit이 대화나 리뷰를 통해 학습한 내용을 어디에 저장하고 참조할지 범위를 설정합니다. 'local'은 현재 레포지토리에 한정됨을 의미합니다.
  learnings:
    scope: local
  # 이슈 정보를 참조할 범위를 설정합니다.
  issues:
    scope: local
  # 풀 리퀘스트 정보를 참조할 범위를 설정합니다.
  pull_requests:
    scope: local