{"version":3,"file":"shared-ui-notFound-NotFound-stories.82acf58a.iframe.bundle.js","mappings":";;;;AAQA;;;AAKA;;;;;;;AASA;;;;;;;;;AAWA;;;;;;AAWA;AACA;AACA;;AAEA;AAcA;;;AAKA;;;;AAMA;;;AAKA;;;;AAMA;;AAEA;AAGA;AAIA;;;AAGA;ACjFA;;;;ACHA;;;AAGA;AAGA;AACA;AACA;AACA;AAGA;;;;;AAKA;AAGA;;;;AAIA;AACA;AACA;AAGA;AACA;AACA;AACA;AC9BA;;;;;;;AAAA;;;;;;;ACDA;AAKA;AACA;AACA;;;AAIA;AACA;AACA;;;AAGA;AAGA;;;AAGA;ACzBA;;;;AAAA","sources":["webpack://client/./src/shared/ui/lazyImage/LazyImage.styles.ts","webpack://client/./src/shared/ui/lazyImage/LazyImage.tsx","webpack://client/./src/shared/ui/notFound/NotFound.styles.ts","webpack://client/./src/shared/ui/notFound/NotFound.tsx","webpack://client/./src/shared/ui/skeleton/Skeleton.styles.ts","webpack://client/./src/shared/ui/skeleton/Skeleton.tsx"],"sourcesContent":["import { css } from '@emotion/react';\nimport styled from '@emotion/styled';\n\nexport const LazyImageContainer = styled.div`\n  position: relative;\n  display: inline-block;\n`;\n\nconst iconStyles = css`\n  width: 40px;\n  height: 40px;\n`;\n\nconst characterStyles = css`\n  width: 250px;\n  object-fit: contain;\n\n  @media (max-width: 768px) {\n    width: 180px;\n  }\n`;\n\nconst levelIconStyles = css`\n  width: 50px;\n  height: 50px;\n  object-fit: contain;\n\n  @media (max-width: 768px) {\n    width: 25px;\n    height: 25px;\n  }\n`;\n\nexport const ErrorFallback = styled.div<{\n  width?: string | number;\n  height?: string | number;\n  $borderRadius?: string | number;\n  $variant: string;\n}>`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  background-color: #f5f5f5;\n  border: 1px solid #ddd;\n  border-radius: ${({ $borderRadius }) => $borderRadius || '4px'};\n  width: ${({ width }) => (typeof width === 'number' ? `${width}px` : width || '100%')};\n  height: ${({ height }) => (typeof height === 'number' ? `${height}px` : height || '100%')};\n\n  ${({ $variant }) => {\n    switch ($variant) {\n      case 'icon':\n        return iconStyles;\n      case 'character':\n        return characterStyles;\n      case 'levelIcon':\n        return levelIconStyles;\n      default:\n        return '';\n    }\n  }}\n`;\n\nexport const ErrorIcon = styled.span`\n  font-size: 24px;\n  opacity: 0.5;\n`;\n\nexport const PlaceholderWrapper = styled.div<{\n  $isVisible: boolean;\n}>`\n  position: absolute;\n  top: 0;\n  left: 0;\n  opacity: ${({ $isVisible }) => ($isVisible ? 1 : 0)};\n  transition: opacity 0.3s ease;\n  pointer-events: none;\n`;\n\nexport const ErrorWrapper = styled.div<{\n  $isVisible: boolean;\n}>`\n  position: absolute;\n  top: 0;\n  left: 0;\n  opacity: ${({ $isVisible }) => ($isVisible ? 1 : 0)};\n  transition: opacity 0.3s ease;\n  pointer-events: ${({ $isVisible }) => ($isVisible ? 'auto' : 'none')};\n`;\n\nexport const Image = styled.img<{\n  $variant: string;\n  $isVisible: boolean;\n}>`\n  opacity: ${({ $isVisible }) => ($isVisible ? 1 : 0)};\n  transition: opacity 0.3s ease;\n\n  ${({ $variant }) => {\n    switch ($variant) {\n      case 'icon':\n        return iconStyles;\n      case 'character':\n        return characterStyles;\n      case 'levelIcon':\n        return levelIconStyles;\n      default:\n        return '';\n    }\n  }}\n`;\n","import React, { useState } from 'react';\nimport { Skeleton } from '../skeleton/Skeleton';\nimport * as S from './LazyImage.styles';\n\ninterface LazyImageProps extends Omit<React.ImgHTMLAttributes<HTMLImageElement>, 'src' | 'alt'> {\n  src: string;\n  alt: string;\n  width?: string | number;\n  height?: string | number;\n  borderRadius?: string | number;\n  skeletonClassName?: string;\n  variant?: 'icon' | 'character' | 'levelIcon' | 'default';\n  eager?: boolean;\n}\n\nexport const LazyImage: React.FC<LazyImageProps> = ({\n  src,\n  alt,\n  width,\n  height,\n  borderRadius = '4px',\n  skeletonClassName,\n  variant = 'default',\n  eager = false,\n  ...imgProps\n}) => {\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [hasError, setHasError] = useState(false);\n\n  const handleLoad = () => {\n    setIsLoaded(true);\n  };\n\n  const handleError = () => {\n    setHasError(true);\n  };\n\n  return (\n    <S.LazyImageContainer>\n      <S.PlaceholderWrapper $isVisible={!isLoaded && !hasError}>\n        <Skeleton\n          width={width}\n          height={height}\n          borderRadius={borderRadius}\n          className={skeletonClassName}\n        />\n      </S.PlaceholderWrapper>\n\n      <S.ErrorWrapper $isVisible={hasError}>\n        <S.ErrorFallback\n          width={width}\n          height={height}\n          $borderRadius={borderRadius}\n          $variant={variant}\n        >\n          <S.ErrorIcon>ðŸ“·</S.ErrorIcon>\n        </S.ErrorFallback>\n      </S.ErrorWrapper>\n\n      <S.Image\n        {...imgProps}\n        src={src}\n        alt={alt}\n        loading={eager ? 'eager' : 'lazy'}\n        onLoad={handleLoad}\n        onError={handleError}\n        $variant={variant}\n        $isVisible={isLoaded && !hasError}\n        style={imgProps.style}\n      />\n    </S.LazyImageContainer>\n  );\n};\n","import styled from '@emotion/styled';\n\nexport type Size = 'small' | 'large';\n\ninterface StyledProps {\n  $size: Size;\n}\n\nexport const NotFoundWrapper = styled.div<StyledProps>`\n  display: flex;\n  width: 100%;\n  flex-direction: column;\n  height: ${({ $size }) => ($size === 'large' ? '55vh' : 'auto')};\n  align-items: center;\n  justify-content: center;\n  gap: ${({ $size }) => ($size === 'large' ? '30px' : '8px')};\n`;\n\nexport const NotFoundIconWrapper = styled.div<StyledProps>`\n  width: ${({ $size }) => ($size === 'large' ? '30px' : '24px')};\n  height: ${({ $size }) => ($size === 'large' ? '30px' : '24px')};\n  color: ${({ theme }) => theme.colors['gray-400']};\n`;\n\nexport const NotFoundContainer = styled.div<StyledProps>`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  gap: ${({ $size }) => ($size === 'large' ? '10px' : '8px')};\n`;\n\nexport const NotFoundTitle = styled.div<StyledProps>`\n  display: flex;\n  align-items: center;\n  gap: 10px;\n  font-size: ${({ $size }) => ($size === 'large' ? '28px' : '14px')};\n  font-weight: ${({ $size }) => ($size === 'large' ? '700' : '400')};\n  color: ${({ theme }) => theme.colors['gray-400']};\n`;\n\nexport const NotFoundSubtitle = styled.div<StyledProps>`\n  font-weight: ${({ $size }) => ($size === 'large' ? '600' : '400')};\n  font-size: ${({ $size }) => ($size === 'large' ? '16px' : '14px')};\n  color: ${({ theme }) => theme.colors['gray-400']};\n`;\n\nexport const NotFoundImage = styled.img`\n  width: 250px;\n  object-fit: contain;\n\n  @media (max-width: 768px) {\n    width: 180px;\n  }\n`;\n","import { Eye, LucideIcon } from 'lucide-react';\nimport { Card } from '../';\nimport { LazyImage } from '../lazyImage/LazyImage';\nimport * as S from './NotFound.styles';\n\ninterface NotFoundProps {\n  title: string;\n  subtitle: string;\n  icon?: LucideIcon;\n  iconSize?: number;\n  size?: 'small' | 'large';\n  withCard?: boolean;\n}\n\nexport const NotFound = ({\n  title,\n  subtitle,\n  icon: IconComponent = Eye,\n  iconSize = 24,\n  size = 'large',\n  withCard = false,\n}: NotFoundProps) => {\n  const content = (\n    <S.NotFoundWrapper $size={size}>\n      <S.NotFoundIconWrapper $size={size}>\n        <IconComponent size={iconSize} />\n      </S.NotFoundIconWrapper>\n      <S.NotFoundContainer $size={size}>\n        <S.NotFoundTitle $size={size}>{title}</S.NotFoundTitle>\n        <S.NotFoundSubtitle $size={size}>{subtitle}</S.NotFoundSubtitle>\n        <LazyImage\n          src={'/images/character.webp'}\n          alt=\"notFound\"\n          variant=\"character\"\n          width=\"250px\"\n          height=\"auto\"\n        />\n      </S.NotFoundContainer>\n    </S.NotFoundWrapper>\n  );\n\n  if (withCard) {\n    return <Card width=\"medium\">{content}</Card>;\n  }\n\n  return content;\n};\n","import { theme } from '@/app/styles/theme';\nimport { keyframes } from '@emotion/react';\nimport styled from '@emotion/styled';\n\nconst shimmer = keyframes`\n  0% {\n    background-position: -200px 0;\n  }\n  100% {\n    background-position: calc(200px + 100%) 0;\n  }\n`;\n\nexport const SkeletonContainer = styled.div<{\n  width: string | number;\n  height: string | number;\n  borderRadius: string | number;\n}>`\n  width: ${({ width }) => (typeof width === 'number' ? `${width}px` : width)};\n  height: ${({ height }) => (typeof height === 'number' ? `${height}px` : height)};\n  border-radius: ${({ borderRadius }) =>\n    typeof borderRadius === 'number' ? `${borderRadius}px` : borderRadius};\n  background: linear-gradient(\n    90deg,\n    ${theme.colors['slate-800_60']} 25%,\n    ${theme.colors['gray-700']} 50%,\n    ${theme.colors['slate-800_60']} 75%\n  );\n  background-size: 200px 100%;\n  animation: ${shimmer} 4s ease-in-out infinite;\n`;\n\nexport const SkeletonTextContainer = styled.div<{ gap: string }>`\n  display: flex;\n  flex-direction: column;\n  gap: ${({ gap }) => gap};\n`;\n\nexport const SkeletonCardContent = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 16px;\n`;\n","import React from 'react';\nimport * as S from './Skeleton.styles';\n\ninterface SkeletonProps {\n  width?: string | number;\n  height?: string | number;\n  borderRadius?: string | number;\n  className?: string;\n}\n\nexport const Skeleton: React.FC<SkeletonProps> = ({\n  width = '100%',\n  height = '1rem',\n  borderRadius = '4px',\n  className,\n}) => {\n  return (\n    <S.SkeletonContainer\n      width={width}\n      height={height}\n      borderRadius={borderRadius}\n      className={className}\n    />\n  );\n};\n\ninterface SkeletonTextProps {\n  lines?: number;\n  lineHeight?: string;\n  gap?: string;\n}\n\nexport const SkeletonText: React.FC<SkeletonTextProps> = ({\n  lines = 1,\n  lineHeight = '1rem',\n  gap = '0.5rem',\n}) => {\n  return (\n    <S.SkeletonTextContainer gap={gap}>\n      {Array.from({ length: lines }).map((_, index) => (\n        <Skeleton key={index} height={lineHeight} width={index === lines - 1 ? '75%' : '100%'} />\n      ))}\n    </S.SkeletonTextContainer>\n  );\n};\n"],"names":[],"sourceRoot":""}