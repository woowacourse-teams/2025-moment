name: Dev Server CD

on:
  pull_request:
    types: [ closed ]
    branches: [ develop ]
    paths: [ 'server/**' ]

jobs:
  deploy:
    if: github.event.pull_request.merged == true
    runs-on: [ self-hosted, backend ]
    permissions:
      contents: read

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Cache Gradle dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2
        with:
          gradle-home-cache-cleanup: true

      - name: build with Gradle
        run: ./gradlew build -x test

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@v5
        with:
          context: ./server
          file: ./server/Dockerfile
          push: true
          platforms: linux/arm64
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/moment:latest
            ${{ secrets.DOCKERHUB_USERNAME }}/moment:${{ github.sha }}
          cache-from: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/moment:buildcache
          cache-to: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/moment:buildcache,mode=max

      - name: Stop and remove existing container
        run: |
            if [ "$(sudo docker ps -a -q -f name=moment-app-server)" ]; then
              sudo docker stop moment-app-server
              sudo docker rm -f moment-app-server
            fi

      - name: Pull latest image
        run: docker pull ${{ secrets.DOCKERHUB_USERNAME }}/moment:latest

      - name: Deploy with Docker Compose
        run: |
          cd /home/ubuntu/moment
        
          sudo docker compose up --no-deps -d app
          
          echo "=== Checking if image exists locally ==="
          docker images | grep "$DOCKER_REPO" || echo "No local images found for $DOCKER_REPO"

      - name: Prune old images
        run: docker image prune -f
