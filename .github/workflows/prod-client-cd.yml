name: Deploy Client to S3 + CloudFront

on:
  push:
    branches: [main]

jobs:
  start-runner:
    name: Start EC2 Instance
    runs-on: ubuntu-latest
    steps:
      - name: Start EC2 instance
        run: |
          echo "Starting EC2 runner instance..."
          aws ec2 start-instances --instance-ids ${{ secrets.EC2_RUNNER_INSTANCE_ID }}
          echo "Waiting for EC2 runner to start..."
          aws ec2 wait instance-status-ok --instance-ids ${{ secrets.EC2_RUNNER_INSTANCE_ID }}

  build-and-deploy:
    name: Build and Deploy Client
    runs-on: self-hosted
    needs: start-runner
    defaults:
      run:
        working-directory: ./client
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'
          cache-dependency-path: client/pnpm-lock.yaml

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: latest

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build application
        run: pnpm run build
        env:
          NODE_ENV: production

      - name: Upload to S3
        run: |
          echo "Uploading build files to S3..."
          aws s3 sync ./dist s3://${{ secrets.S3_BUCKET_NAME }}/moment \
            --delete \
            --cache-control "public,max-age=31536000,immutable" \
            --exclude "*.html" \
            --exclude "service-worker.js"

          # HTML files with shorter cache
          aws s3 sync ./dist s3://${{ secrets.S3_BUCKET_NAME }}/moment \
            --cache-control "public,max-age=0,must-revalidate" \
            --include "*.html" \
            --include "service-worker.js"

      - name: Invalidate CloudFront cache
        run: |
          echo "Creating CloudFront invalidation..."
          INVALIDATION_ID=$(aws cloudfront create-invalidation \
            --distribution-id ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }} \
            --paths "/*" \
            --query 'Invalidation.Id' \
            --output text)
          echo "Invalidation ID: $INVALIDATION_ID"

  stop-runner:
    name: Stop EC2 Instance
    runs-on: ubuntu-latest
    if: always()
    needs: build-and-deploy
    steps:
      - name: Stop EC2 instance
        run: |
          echo "Stopping EC2 runner instance..."
          aws ec2 stop-instances --instance-ids ${{ secrets.EC2_RUNNER_INSTANCE_ID }}
          echo "EC2 instance stopped"
