name: Notify PR Open or Merge to Discord (client only)

on:
  pull_request:
    types:
      - opened
      - closed

jobs:
  notify-discord:
    runs-on: ubuntu-latest
    steps:
      - name: Notify Discord about PR (opened or merged)
        uses: actions/github-script@v7
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK_FE }}
        with:
          script: |
            const webhookUrl = process.env.DISCORD_WEBHOOK_FE;
            if (!webhookUrl) {
              console.log('Discord webhook URL이 설정되지 않았습니다.');
              return;
            }

            const pr = context.payload.pull_request;
            const action = context.payload.action;

            if (!['opened', 'closed'].includes(action)) {
              console.log(`처리하지 않는 PR 이벤트: ${action}`);
              return;
            }

            if (action === 'closed' && !pr.merged) {
              console.log('PR이 닫혔지만 병합되지 않음. 알림 생략');
              return;
            }

            const files = await github.rest.pulls.listFiles({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: pr.number,
              per_page: 100,
            });

            const changedInClient = files.data.some(file => file.filename.startsWith('client/'));
            if (!changedInClient) {
              console.log('client 디렉토리에 변경사항 없음. 알림 생략');
              return;
            }

            const embed = {
              title: action === 'opened'
                ? `📥 PR Opened: ${pr.title}`
                : `🔀 PR Merged: ${pr.title}`,
              description: action === 'opened'
                ? `**client** 디렉토리에 변경사항이 있는 PR이 열렸습니다.\n\n**작성자:** [@${pr.user.login}](${pr.user.html_url})\n**PR 링크:** [#${pr.number}](${pr.html_url})`
                : `**client** 디렉토리 변경이 포함된 PR이 병합되었습니다! 🎉\n\n**작성자:** [@${pr.user.login}](${pr.user.html_url})\n**PR 링크:** [#${pr.number}](${pr.html_url})`,
              color: action === 'opened' ? 0x00b0f4 : 0x5865F2,
              author: {
                name: pr.user.login,
                icon_url: pr.user.avatar_url
              },
              timestamp: new Date().toISOString(),
              fields: [
                { name: "기반 브랜치", value: `${pr.base.ref}`, inline: true },
                { name: "PR 브랜치", value: `${pr.head.ref}`, inline: true },
                ...(action === 'closed'
                  ? [{ name: "커밋 수", value: `${pr.commits}`, inline: true }]
                  : [])
              ]
            };

            const discordPayload = { embeds: [embed] };

            const response = await fetch(webhookUrl, {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify(discordPayload)
            });

            if (!response.ok) {
              const responseBody = await response.text();
              console.error(`Discord 전송 실패: ${response.status} ${response.statusText}`);
              console.error(`응답 내용: ${responseBody}`);
              core.setFailed(`디스코드 전송 실패`);
            } else {
              console.log(`디스코드 알림 전송 성공 (${action})`);
            }
