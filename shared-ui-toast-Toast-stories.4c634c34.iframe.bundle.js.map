{"version":3,"file":"shared-ui-toast-Toast-stories.4c634c34.iframe.bundle.js","mappings":";;;;;;;;;AAiBA;;;;;;;;;AAWA;;;;;;;;;;;;;;;;;AA0CA;AAKA;;;;;;;;;;AAUA;;;;AAIA;;;;;;;AAuBA;;;;;AAOA;;;AAKA;;;;;;;;;;;;;;;;;;;;;ACtHA","sources":["webpack://client/./src/shared/ui/toast/Toast.styles.ts","webpack://client/./src/shared/ui/toast/Toast.tsx"],"sourcesContent":["import { CustomTheme } from '@/app/styles/theme';\nimport { keyframes } from '@emotion/react';\nimport styled from '@emotion/styled';\n\nexport type ToastVariant = 'success' | 'error' | 'warning' | 'message';\n\nconst slideIn = keyframes`\n  from {\n    transform: translateX(100%);\n    opacity: 0;\n  }\n  to {\n    transform: translateX(0);\n    opacity: 1;\n  }\n`;\n\nconst slideOut = keyframes`\n  from {\n    transform: translateX(0);\n    opacity: 1;\n  }\n  to {\n    transform: translateX(100%);\n    opacity: 0;\n  }\n`;\n\nconst toastVariants = {\n  success: (theme: CustomTheme) => `\n    background-color: ${theme.colors['emerald-50']};\n    border-left: 4px solid ${theme.colors['emerald-500']};\n    color: ${theme.colors['emerald-600']};\n  `,\n  error: (theme: CustomTheme) => `\n    background-color: color-mix(in srgb, ${theme.colors['red-500']} 10%, transparent);\n    border-left: 4px solid ${theme.colors['red-500']};\n    color: ${theme.colors['red-500']};\n  `,\n  warning: (theme: CustomTheme) => `\n    background-color: color-mix(in srgb, ${theme.colors['orange-500_80']} 10%, transparent);\n    border-left: 4px solid ${theme.colors['orange-500_80']};\n    color: ${theme.colors['orange-500_80']};\n  `,\n  message: (theme: CustomTheme) => `\n    background-color: color-mix(in srgb, ${theme.colors['yellow-300_80']} 10%, transparent);\n    border-left: 4px solid ${theme.colors['yellow-300_80']};\n    color: ${theme.colors['yellow-300_80']};\n  `,\n};\n\nexport const ToastContainer = styled.div`\n  position: fixed;\n  top: 10vh;\n  right: 20px;\n  z-index: 9999;\n  display: flex;\n  flex-direction: column;\n  gap: 12px;\n  max-width: 400px;\n  width: 100%;\n\n  @media (max-width: 768px) {\n    right: 10px;\n    left: 10px;\n    max-width: none;\n    top: 8vh;\n  }\n`;\n\nexport const ToastItem = styled.div<{\n  variant: ToastVariant;\n  isExiting?: boolean;\n  $isClickable?: boolean;\n}>`\n  ${({ theme, variant }) => toastVariants[variant](theme)};\n  padding: 16px 20px;\n  border-radius: 8px;\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);\n  display: flex;\n  align-items: center;\n  gap: 12px;\n  font-size: 14px;\n  font-weight: 500;\n  position: relative;\n  animation: ${({ isExiting }) => (isExiting ? slideOut : slideIn)} 0.3s ease-out forwards;\n  backdrop-filter: blur(8px);\n  min-height: 60px;\n\n  ${({ $isClickable }) =>\n    $isClickable &&\n    `\n    cursor: pointer;\n    transition: transform 0.2s ease, box-shadow 0.2s ease;\n    \n    &:hover {\n      transform: translateY(-2px);\n      box-shadow: 0 6px 16px rgba(0, 0, 0, 0.2);\n    }\n    \n    &:active {\n      transform: translateY(0);\n    }\n  `}\n\n  @media (max-width: 768px) {\n    padding: 14px 16px;\n    font-size: 13px;\n    min-height: 56px;\n  }\n`;\n\nexport const ToastIconWrapper = styled.div`\n  flex-shrink: 0;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n`;\n\nexport const ToastMessage = styled.div`\n  flex: 1;\n  line-height: 1.4;\n`;\n\nexport const CloseButton = styled.button`\n  background: none;\n  border: none;\n  cursor: pointer;\n  padding: 4px;\n  border-radius: 4px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  opacity: 0.7;\n  transition: opacity 0.2s ease;\n  flex-shrink: 0;\n\n  &:hover {\n    opacity: 1;\n  }\n\n  &:focus {\n    outline: 2px solid currentColor;\n    outline-offset: 2px;\n  }\n`;\n","import { ToastProps } from '@/shared/types/toast';\nimport { KeyRound, CheckCircle, Mail, X, XCircle } from 'lucide-react';\nimport React, { useEffect, useState } from 'react';\nimport { useNavigate } from 'react-router';\nimport * as S from './Toast.styles';\n\nexport const Toast: React.FC<ToastProps> = ({\n  message,\n  variant,\n  duration = 3000,\n  routeType,\n  onClose,\n}) => {\n  const [isExiting, setIsExiting] = useState(false);\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    if (duration > 0) {\n      const timer = setTimeout(() => {\n        handleClose();\n      }, duration);\n\n      return () => clearTimeout(timer);\n    }\n  }, [duration]);\n\n  const handleClose = (e?: React.MouseEvent) => {\n    e?.stopPropagation();\n    setIsExiting(true);\n    setTimeout(() => {\n      onClose();\n    }, 300);\n  };\n\n  const handleToastClick = () => {\n    if (variant === 'message' && routeType) {\n      const route = routeType === 'moment' ? '/collection/my-moment' : '/collection/my-comment';\n      navigate(route);\n      handleClose();\n    }\n  };\n\n  const getIcon = () => {\n    switch (variant) {\n      case 'success':\n        return <CheckCircle size={20} />;\n      case 'error':\n        return <XCircle size={20} />;\n      case 'warning':\n        return <KeyRound size={20} />;\n      case 'message':\n        return <Mail size={20} />;\n      default:\n        return null;\n    }\n  };\n\n  return (\n    <S.ToastItem\n      variant={variant}\n      isExiting={isExiting}\n      onClick={handleToastClick}\n      $isClickable={variant === 'message' && !!routeType}\n    >\n      <S.ToastIconWrapper>{getIcon()}</S.ToastIconWrapper>\n      <S.ToastMessage>{message}</S.ToastMessage>\n      <S.CloseButton onClick={e => handleClose(e)} aria-label=\"토스트 닫기\">\n        <X size={16} />\n      </S.CloseButton>\n    </S.ToastItem>\n  );\n};\n"],"names":[],"sourceRoot":""}