{"version":3,"file":"shared-ui-card-Card-stories.99e813dc.iframe.bundle.js","mappings":";;AAuFA;AACA;;;;;AAKA;AACA;;ACjFA;AC2BA;ACjCA;;AAMA;;;;;;;;;;;ACWA;;;;AAMA;;AAEA;AAGA;;AAEA;;ACdA;ACfA","sources":["webpack://client/./src/shared/ui/button/Button.styles.ts","webpack://client/./src/shared/ui/button/Button.tsx","webpack://client/./src/shared/ui/card/Card.styles.ts","webpack://client/./src/shared/ui/card/CardAction.tsx","webpack://client/./src/shared/ui/card/CardTitleContainer.styles.ts","webpack://client/./src/shared/ui/textArea/TextArea.styles.ts","webpack://client/./src/shared/ui/textArea/TextArea.tsx"],"sourcesContent":["import { CustomTheme } from '@/app/styles/theme';\nimport styled from '@emotion/styled';\n\nexport type ButtonVariant = 'primary' | 'secondary' | 'tertiary';\nexport type ExternalVariant = (theme: CustomTheme) => string;\n\nconst buttonStyles = {\n  primary: (theme: CustomTheme) => `\n    background-color: transparent;\n    color: #fff;\n    border: 1px solid ${theme.colors['slate-700']};\n    border-radius: 50px;\n    padding: 10px 20px;\n    font-size: 16px;\n    font-weight: 600;\n\n    &:hover {\n        transform: scale(1.05);\n        transition: transform 0.3s ease;\n    }\n\n    @media (max-width: 768px) {\n        padding: 8px 16px;\n        font-size: 14px;\n    }\n    `,\n\n  secondary: (theme: CustomTheme) => `\n    background-color: ${theme.colors['yellow-500']};\n    color: black;\n    padding: 18px 30px;\n    border-radius: 50px;\n    font-size: 24px;\n    font-weight: bold;\n    transition: all 0.3s ease;\n\n    @media (max-width: 768px) {\n        padding: 16px 24px;\n        font-size: 20px;\n    }\n\n    @media (max-width: 480px) {\n        padding: 14px 20px;\n        font-size: 18px;\n    }\n\n    &:hover {\n        filter: brightness(1.1);\n        box-shadow: 0 0 20px rgba(255, 255, 255, 0.3);\n        transform: translateY(-2px);\n    }\n    `,\n\n  tertiary: (theme: CustomTheme) => `\n    background-color: ${theme.colors['yellow-500']};\n    color: black;\n    padding: 10px 20px;\n    border-radius: 5px;\n    font-size: 16px;\n    font-weight: bold;\n    display: flex;\n    align-items: center;\n    gap: 10px;\n    transition: all 0.3s ease;\n\n    @media (max-width: 768px) {\n        padding: 16px 24px;\n        font-size: 14px;\n    }\n\n    @media (max-width: 480px) {\n        padding: 14px 20px;\n        font-size: 12px;\n    }\n\n    &:hover {\n        filter: brightness(1.1);\n        box-shadow: 0 0 20px rgba(255, 255, 255, 0.3);\n        transform: translateY(-2px);\n    }\n    `,\n};\n\nexport const Button = styled.button<{\n  variant: ButtonVariant;\n  externalVariant?: ExternalVariant;\n}>`\n  ${({ theme, variant }) => buttonStyles[variant](theme)};\n  ${({ theme, externalVariant }) => externalVariant && externalVariant(theme)};\n\n  &:disabled {\n    cursor: not-allowed;\n    transform: none;\n    color: ${({ theme }) => theme.colors['slate-700']};\n    border: 1px solid ${({ theme }) => theme.colors['slate-700']};\n  }\n`;\n","import { LucideIcon } from 'lucide-react';\nimport * as S from './Button.styles';\nimport { ButtonVariant, ExternalVariant } from './Button.styles';\n\ninterface ButtonProps extends React.HTMLAttributes<HTMLButtonElement> {\n  variant?: ButtonVariant;\n  externalVariant?: ExternalVariant;\n  title: string;\n  onClick?: () => void;\n  disabled?: boolean;\n  Icon?: LucideIcon;\n}\n\nexport const Button = ({\n  variant = 'primary',\n  externalVariant,\n  title,\n  onClick,\n  disabled,\n  Icon,\n  ...props\n}: ButtonProps) => {\n  return (\n    <S.Button\n      variant={variant}\n      externalVariant={externalVariant}\n      onClick={onClick}\n      disabled={disabled}\n      {...props}\n    >\n      {Icon && <Icon size={16} />}\n      {title}\n    </S.Button>\n  );\n};\n","import { CustomTheme } from '@/app/styles/theme';\nimport styled from '@emotion/styled';\n\nexport type cardWidth = 'small' | 'medium' | 'large' | 'full';\n\nconst CardStyles = {\n  card: (theme: CustomTheme, $width: cardWidth, $shadow: boolean) => `\n    display: flex;\n    flex-direction: column;\n    gap: 15px;\n    width: ${theme.typography.cardWidth[$width]};\n    padding: 20px 30px;\n    background-color: ${theme.colors['slate-800_60']};\n    border-radius: 10px;\n    border: 1px solid ${theme.colors['gray-700']};\n    word-break: keep-all;\n    ${\n      $shadow &&\n      `\n      box-shadow: 0px 0px 15px ${theme.colors['yellow-300_80']};\n      animation: shadowPulse 2s ease-in-out infinite;\n    `\n    }\n\n    @keyframes shadowPulse {\n      0%, 100% {\n        box-shadow: 0px 0px 10px ${theme.colors['yellow-300_80']};\n      }\n      50% {\n        box-shadow: 0px 0px 25px ${theme.colors['yellow-300_80']};\n      }\n    }\n\n    @media (max-width: 768px) {\n      width: 90%;\n    }\n    `,\n};\n\nexport const Card = styled.div<{ $width: cardWidth; $shadow: boolean }>`\n  ${({ theme, $width, $shadow }) => CardStyles.card(theme, $width, $shadow)}\n`;\n","import styled from '@emotion/styled';\n\ninterface CardActionProps {\n  children: React.ReactNode;\n  position: 'center' | 'space-between';\n}\n\nexport const CardAction = ({ children, position = 'center' }: CardActionProps) => {\n  return <CardActionStyles position={position}>{children}</CardActionStyles>;\n};\n\nconst CardActionStyles = styled.section<{ position: 'center' | 'space-between' }>`\n  display: flex;\n  justify-content: ${({ position }) => (position === 'center' ? 'center' : 'space-between')};\n`;\n","import { CustomTheme } from '@/app/styles/theme';\nimport styled from '@emotion/styled';\n\nexport const CardTitleStyles = {\n  cardTitle: (theme: CustomTheme) => `\n    font-size: ${theme.typography.title.fontSize.small};\n    font-weight: ${theme.typography.fontWeight.large};\n    color: ${theme.colors.white};\n    `,\n};\n\nexport const CardSubtitleStyles = {\n  cardSubtitle: (theme: CustomTheme) => `\n    font-size: ${theme.typography.subTitle.fontSize.medium};\n    color: ${theme.colors['gray-200']};\n    `,\n};\n\nexport const CardTitleWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  gap: 10px;\n`;\n\nexport const CardTitleContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 5px;\n`;\n\nexport const CardTitle = styled.span`\n  width: 100%;\n  ${({ theme }) => CardTitleStyles.cardTitle(theme)}\n`;\n\nexport const CardSubtitle = styled.span`\n  width: 100%;\n  ${({ theme }) => CardSubtitleStyles.cardSubtitle(theme)}\n`;\n","import { CustomTheme } from '@/app/styles/theme';\nimport styled from '@emotion/styled';\n\nexport type textAreaHeight = 'small' | 'medium' | 'large';\n\nconst TextAreaStyles = {\n  textarea: (theme: CustomTheme, $height: textAreaHeight) => `\n    width: 100%;\n    padding: 20px;\n    background-color: ${theme.colors['gray-600_20']};\n    border-radius: 5px;\n    height: ${theme.typography.textAreaHeight[$height]};\n    color: ${theme.colors.white};\n    border: 1px solid ${theme.colors['gray-700']};\n    resize: none; \n    \n    &::placeholder {\n        color: ${theme.colors.white};\n    }\n    `,\n};\n\nexport const TextArea = styled.textarea<{ $height: textAreaHeight }>`\n  ${({ theme, $height }) => TextAreaStyles.textarea(theme, $height)}\n`;\n","import { textAreaHeight } from './TextArea.styles';\nimport * as S from './TextArea.styles';\n\ninterface TextAreaProps extends React.TextareaHTMLAttributes<HTMLTextAreaElement> {\n  placeholder: string;\n  height: textAreaHeight;\n}\n\nexport const TextArea = ({ placeholder, height, ...props }: TextAreaProps) => {\n  return <S.TextArea placeholder={placeholder} $height={height} {...props} />;\n};\n"],"names":[],"sourceRoot":""}