{"version":3,"file":"shared-ui-button-Button-stories.40204770.iframe.bundle.js","mappings":";;AAkIA;AACA;;;;;AAKA;AACA;;AC3HA","sources":["webpack://client/./src/shared/ui/button/Button.styles.ts","webpack://client/./src/shared/ui/button/Button.tsx"],"sourcesContent":["import { CustomTheme } from '@/app/styles/theme';\nimport styled from '@emotion/styled';\n\nexport type ButtonVariant = 'primary' | 'secondary' | 'tertiary' | 'quaternary' | 'quinary';\nexport type ExternalVariant = (theme: CustomTheme) => string;\n\nconst buttonStyles = {\n  primary: (theme: CustomTheme) => `\n    background-color: transparent;\n    color: #fff;\n    border: 1px solid ${theme.colors['slate-700']};\n    border-radius: 50px;\n    padding: 10px 20px;\n    font-size: 16px;\n    font-weight: 600;\n    white-space: nowrap;\n\n    &:hover {\n        transform: scale(1.05);\n        transition: transform 0.3s ease;\n    }\n\n    @media (max-width: 768px) {\n        padding: 8px 16px;\n        font-size: 14px;\n    }\n    `,\n\n  secondary: (theme: CustomTheme) => `\n    background-color: ${theme.colors['yellow-500']};\n    color: black;\n    padding: 18px 30px;\n    border-radius: 50px;\n    font-size: 24px;\n    font-weight: bold;\n    transition: all 0.3s ease;\n\n    @media (max-width: 768px) {\n        padding: 16px 24px;\n        font-size: 20px;\n    }\n\n    @media (max-width: 480px) {\n        padding: 14px 20px;\n        font-size: 18px;\n    }\n\n    &:hover {\n        filter: brightness(1.1);\n        box-shadow: 0 0 20px rgba(255, 255, 255, 0.3);\n        transform: translateY(-2px);\n    }\n    `,\n\n  tertiary: (theme: CustomTheme) => `\n    background-color: ${theme.colors['yellow-500']};\n    color: black;\n    padding: 10px 20px;\n    border-radius: 5px;\n    font-size: 1.1rem;\n    font-weight: bold;\n    display: flex;\n    align-items: center;\n    gap: 10px;\n    transition: all 0.3s ease;\n\n    @media (max-width: 768px) {\n        padding: 16px 24px;\n    }\n\n    @media (max-width: 480px) {\n        padding: 14px 20px;\n        font-size: 1rem;\n    }\n\n    &:hover {\n        filter: brightness(1.1);\n        box-shadow: 0 0 20px rgba(255, 255, 255, 0.3);\n        transform: translateY(-2px);\n    }\n    `,\n\n  quaternary: (theme: CustomTheme) => `\n    background-color: transparent;\n    color: ${theme.colors['gray-200']};\n    border: 1px solid ${theme.colors['slate-700']};\n    padding: 10px 20px;\n    border-radius: 50px;\n    font-size: 16px;\n\n    @media (max-width: 1024px) {\n      padding: 8px 16px;\n      font-size: 14px;\n    }\n\n    @media (max-width: 768px) {\n      padding: 4px 10px;\n      font-size: 12px;\n    \n      &:hover {\n        filter: brightness(1.1);\n        box-shadow: 0 0 20px rgba(255, 255, 255, 0.3);\n        transform: translateY(-2px);\n    }\n    }\n  `,\n\n  quinary: (theme: CustomTheme) => `\n    background-color: ${theme.colors['yellow-300']};\n    color: ${theme.colors['slate-700']};\n    border: 1px solid ${theme.colors['slate-700']};\n    padding: 10px 20px;\n    border-radius: 50px;\n    font-size: 16px;\n\n    @media (max-width: 1024px) {\n      padding: 8px 16px;\n      font-size: 14px;\n    }\n\n    @media (max-width: 768px) {\n      padding: 4px 10px;\n      font-size: 12px;\n    }`,\n};\n\nexport const Button = styled.button<{\n  variant: ButtonVariant;\n  externalVariant?: ExternalVariant;\n}>`\n  ${({ theme, variant }) => buttonStyles[variant](theme)};\n  ${({ theme, externalVariant }) => externalVariant && externalVariant(theme)};\n\n  &:disabled {\n    cursor: not-allowed;\n    transform: none;\n    color: ${({ theme }) => theme.colors['slate-700']};\n    border: 1px solid ${({ theme }) => theme.colors['slate-700']};\n  }\n`;\n","import { LucideIcon } from 'lucide-react';\nimport * as S from './Button.styles';\nimport { ButtonVariant, ExternalVariant } from './Button.styles';\n\ninterface ButtonProps extends React.HTMLAttributes<HTMLButtonElement> {\n  variant?: ButtonVariant;\n  externalVariant?: ExternalVariant;\n  title: string;\n  onClick?: () => void;\n  disabled?: boolean;\n  Icon?: LucideIcon;\n  type?: 'button' | 'submit' | 'reset';\n}\n\nexport const Button = ({\n  variant = 'primary',\n  externalVariant,\n  title,\n  onClick,\n  disabled,\n  Icon,\n  type = 'button',\n  ...props\n}: ButtonProps) => {\n  return (\n    <S.Button\n      variant={variant}\n      externalVariant={externalVariant}\n      onClick={onClick}\n      disabled={disabled}\n      type={type}\n      {...props}\n    >\n      {Icon && <Icon size={16} />}\n      {title}\n    </S.Button>\n  );\n};\n"],"names":[],"sourceRoot":""}