{"version":3,"file":"300.6a21bbee.iframe.bundle.js","mappings":";AAuFA;AACA;;;;;AAKA;AACA;;ACjFA;ACWA;ACjBA;;AAMA;;;;;;;;;;;ACWA;;;;AAMA;;AAEA;AAGA;;AAEA;;;;;;;;;;;ACvBA;;;;AAMA;;;;;AAOA;;;;;;;;;;;;;;;ACxBA;;;;;;;;;;;;ACaA;;;;;;AAQA;;;;;;;;ACZA;;;AAGA;AAGA;AACA;AACA;AACA;AAGA;;;;;AAKA;AAGA;;;;AAIA;AACA;AACA;AAGA;AACA;AACA;AACA;AC/BA;ACOA;ACXA;;;;;;;ACIA;AAKA;AACA;AACA;;;AAIA;AACA;AACA;;;AAGA;AAGA;;;AAGA;ACzBA;;;;AAAA;;;;ACHA;;AAEA;;AAEA;;;;;;AAQA;;;;AAMA;;;;;AAOA;;;;;AAOA;;;;;;;;;AAWA;;;;AAMA;;;;AAMA;;;;AAIA;;AAEA;AACA;;AAIA;;;;AAIA;;AAEA;AACA;;AAIA;;;;AAMA;;;AAKA;;;ACvFA;ACeA;ACfA;;;;;;;;;ACSA;;;;;;;;;AAWA;;;;;;;;;;;;;;;;AA+BA;AAIA;;;;;;;;;;AAUA;;;;;;;;;AAWA;;;;;AAOA;;;AAKA","sources":["webpack://client/./src/shared/ui/button/Button.styles.ts","webpack://client/./src/shared/ui/button/Button.tsx","webpack://client/./src/shared/ui/card/Card.styles.ts","webpack://client/./src/shared/ui/card/CardAction.tsx","webpack://client/./src/shared/ui/card/CardTitleContainer.styles.ts","webpack://client/./src/shared/ui/errorBoundary/ErrorBoundary.styles.ts","webpack://client/./src/shared/ui/errorBoundary/ErrorFallback.tsx","webpack://client/./src/shared/ui/logo/Logo.styles.ts","webpack://client/./src/shared/ui/notFound/NotFound.styles.ts","webpack://client/./src/shared/ui/notFound/NotFound.tsx","webpack://client/./src/shared/ui/simpleCard/SimpleCard.styles.ts","webpack://client/./src/shared/ui/simpleCard/SimpleCard.tsx","webpack://client/./src/shared/ui/skeleton/Skeleton.styles.ts","webpack://client/./src/shared/ui/skeleton/Skeleton.tsx","webpack://client/./src/shared/ui/skeleton/CommonSkeletonCard.styles.ts","webpack://client/./src/shared/ui/skeleton/CommonSkeletonCard.tsx","webpack://client/./src/shared/ui/textArea/TextArea.styles.ts","webpack://client/./src/shared/ui/textArea/TextArea.tsx","webpack://client/./src/shared/ui/toast/Toast.styles.ts"],"sourcesContent":["import { CustomTheme } from '@/app/styles/theme';\nimport styled from '@emotion/styled';\n\nexport type ButtonVariant = 'primary' | 'secondary' | 'tertiary';\nexport type ExternalVariant = (theme: CustomTheme) => string;\n\nconst buttonStyles = {\n  primary: (theme: CustomTheme) => `\n    background-color: transparent;\n    color: #fff;\n    border: 1px solid ${theme.colors['slate-700']};\n    border-radius: 50px;\n    padding: 10px 20px;\n    font-size: 16px;\n    font-weight: 600;\n\n    &:hover {\n        transform: scale(1.05);\n        transition: transform 0.3s ease;\n    }\n\n    @media (max-width: 768px) {\n        padding: 8px 16px;\n        font-size: 14px;\n    }\n    `,\n\n  secondary: (theme: CustomTheme) => `\n    background-color: ${theme.colors['yellow-500']};\n    color: black;\n    padding: 18px 30px;\n    border-radius: 50px;\n    font-size: 24px;\n    font-weight: bold;\n    transition: all 0.3s ease;\n\n    @media (max-width: 768px) {\n        padding: 16px 24px;\n        font-size: 20px;\n    }\n\n    @media (max-width: 480px) {\n        padding: 14px 20px;\n        font-size: 18px;\n    }\n\n    &:hover {\n        filter: brightness(1.1);\n        box-shadow: 0 0 20px rgba(255, 255, 255, 0.3);\n        transform: translateY(-2px);\n    }\n    `,\n\n  tertiary: (theme: CustomTheme) => `\n    background-color: ${theme.colors['yellow-500']};\n    color: black;\n    padding: 10px 20px;\n    border-radius: 5px;\n    font-size: 16px;\n    font-weight: bold;\n    display: flex;\n    align-items: center;\n    gap: 10px;\n    transition: all 0.3s ease;\n\n    @media (max-width: 768px) {\n        padding: 16px 24px;\n        font-size: 14px;\n    }\n\n    @media (max-width: 480px) {\n        padding: 14px 20px;\n        font-size: 12px;\n    }\n\n    &:hover {\n        filter: brightness(1.1);\n        box-shadow: 0 0 20px rgba(255, 255, 255, 0.3);\n        transform: translateY(-2px);\n    }\n    `,\n};\n\nexport const Button = styled.button<{\n  variant: ButtonVariant;\n  externalVariant?: ExternalVariant;\n}>`\n  ${({ theme, variant }) => buttonStyles[variant](theme)};\n  ${({ theme, externalVariant }) => externalVariant && externalVariant(theme)};\n\n  &:disabled {\n    cursor: not-allowed;\n    transform: none;\n    color: ${({ theme }) => theme.colors['slate-700']};\n    border: 1px solid ${({ theme }) => theme.colors['slate-700']};\n  }\n`;\n","import { LucideIcon } from 'lucide-react';\nimport * as S from './Button.styles';\nimport { ButtonVariant, ExternalVariant } from './Button.styles';\n\ninterface ButtonProps extends React.HTMLAttributes<HTMLButtonElement> {\n  variant?: ButtonVariant;\n  externalVariant?: ExternalVariant;\n  title: string;\n  onClick?: () => void;\n  disabled?: boolean;\n  Icon?: LucideIcon;\n}\n\nexport const Button = ({\n  variant = 'primary',\n  externalVariant,\n  title,\n  onClick,\n  disabled,\n  Icon,\n  ...props\n}: ButtonProps) => {\n  return (\n    <S.Button\n      variant={variant}\n      externalVariant={externalVariant}\n      onClick={onClick}\n      disabled={disabled}\n      {...props}\n    >\n      {Icon && <Icon size={16} />}\n      {title}\n    </S.Button>\n  );\n};\n","import { CustomTheme } from '@/app/styles/theme';\nimport styled from '@emotion/styled';\n\nexport type cardWidth = 'small' | 'medium' | 'large';\n\nconst CardStyles = {\n  card: (theme: CustomTheme, $width: cardWidth) => `\n    display: flex;\n    flex-direction: column;\n    gap: 15px;\n    width: ${theme.typography.cardWidth[$width]};\n    padding: 20px 30px;\n    background-color: ${theme.colors['slate-800_60']};\n    border-radius: 10px;\n    border: 1px solid ${theme.colors['gray-700']};\n    word-break: keep-all;\n\n    @media (max-width: 768px) {\n      width: 90%;\n    }\n    `,\n};\n\nexport const Card = styled.div<{ $width: cardWidth }>`\n  ${({ theme, $width }) => CardStyles.card(theme, $width)}\n`;\n","import styled from '@emotion/styled';\n\ninterface CardActionProps {\n  children: React.ReactNode;\n  position: 'center' | 'space-between';\n}\n\nexport const CardAction = ({ children, position = 'center' }: CardActionProps) => {\n  return <CardActionStyles position={position}>{children}</CardActionStyles>;\n};\n\nconst CardActionStyles = styled.section<{ position: 'center' | 'space-between' }>`\n  display: flex;\n  justify-content: ${({ position }) => (position === 'center' ? 'center' : 'space-between')};\n`;\n","import { CustomTheme } from '@/app/styles/theme';\nimport styled from '@emotion/styled';\n\nexport const CardTitleStyles = {\n  cardTitle: (theme: CustomTheme) => `\n    font-size: ${theme.typography.title.fontSize.small};\n    font-weight: ${theme.typography.fontWeight.large};\n    color: ${theme.colors.white};\n    `,\n};\n\nexport const CardSubtitleStyles = {\n  cardSubtitle: (theme: CustomTheme) => `\n    font-size: ${theme.typography.subTitle.fontSize.medium};\n    color: ${theme.colors['gray-200']};\n    `,\n};\n\nexport const CardTitleWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  gap: 10px;\n`;\n\nexport const CardTitleContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 5px;\n`;\n\nexport const CardTitle = styled.span`\n  width: 100%;\n  ${({ theme }) => CardTitleStyles.cardTitle(theme)}\n`;\n\nexport const CardSubtitle = styled.span`\n  width: 100%;\n  ${({ theme }) => CardSubtitleStyles.cardSubtitle(theme)}\n`;\n","import styled from '@emotion/styled';\n\nexport const ErrorContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  min-height: 400px;\n  padding: 40px 20px;\n  text-align: center;\n  background: #0f172a;\n  color: #ffffff;\n`;\n\nexport const ErrorTitle = styled.h1`\n  font-size: 24px;\n  margin-bottom: 16px;\n  color: #ffffff;\n`;\n\nexport const ErrorMessage = styled.p`\n  font-size: 16px;\n  color: #93a1b7;\n  margin-bottom: 32px;\n  max-width: 400px;\n`;\n\nexport const ErrorButton = styled.button`\n  background-color: #f1c40f;\n  color: black;\n  padding: 12px 24px;\n  border-radius: 8px;\n  border: none;\n  font-size: 16px;\n  font-weight: 500;\n  cursor: pointer;\n  transition: all 0.3s ease;\n\n  &:hover {\n    filter: brightness(1.1);\n    transform: translateY(-2px);\n  }\n`;\n","import { ErrorFallbackProps } from '@/shared/types/errorBoundary';\nimport * as S from './ErrorBoundary.styles';\n\nexport const ErrorFallback = ({ error, resetError }: ErrorFallbackProps) => {\n  return (\n    <S.ErrorContainer>\n      <S.ErrorTitle>문제가 발생했습니다</S.ErrorTitle>\n      <S.ErrorMessage>일시적인 문제가 발생했습니다. 다시 시도해 주세요.</S.ErrorMessage>\n\n      {process.env.NODE_ENV === 'development' && (\n        <details style={{ marginTop: '16px', color: '#ef4444' }}>\n          <summary>에러 상세 정보 (개발용)</summary>\n          <pre style={{ fontSize: '12px', marginTop: '8px' }}>\n            {error.message}\n            {error.stack}\n          </pre>\n        </details>\n      )}\n\n      <S.ErrorButton onClick={resetError}>다시 시도</S.ErrorButton>\n    </S.ErrorContainer>\n  );\n};\n","import styled from '@emotion/styled';\n\nexport const LogoButton = styled.button`\n  background-color: transparent;\n  border: none;\n  cursor: pointer;\n  display: flex;\n  align-items: center;\n  gap: 8px;\n\n  &:hover {\n    transform: scale(1.05);\n    transition: transform 0.3s ease;\n  }\n`;\n\nexport const LogoImage = styled.img`\n  width: clamp(30px, 3vw, 50px);\n  height: clamp(30px, 3vw, 50px);\n  object-fit: contain;\n  object-position: center;\n  border-radius: 100%;\n`;\n\nexport const LogoText = styled.span`\n  font-size: 26px;\n  color: white;\n  font-weight: bold;\n`;\n","import styled from '@emotion/styled';\n\nexport type Size = 'small' | 'large';\n\ninterface StyledProps {\n  $size: Size;\n}\n\nexport const NotFoundWrapper = styled.div<StyledProps>`\n  display: flex;\n  width: 100%;\n  flex-direction: column;\n  height: ${({ $size }) => ($size === 'large' ? '55vh' : 'auto')};\n  align-items: center;\n  justify-content: center;\n  gap: ${({ $size }) => ($size === 'large' ? '30px' : '8px')};\n`;\n\nexport const NotFoundIconWrapper = styled.div<StyledProps>`\n  width: ${({ $size }) => ($size === 'large' ? '30px' : '24px')};\n  height: ${({ $size }) => ($size === 'large' ? '30px' : '24px')};\n  color: ${({ theme }) => theme.colors['gray-400']};\n`;\n\nexport const NotFoundContainer = styled.div<StyledProps>`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  gap: ${({ $size }) => ($size === 'large' ? '10px' : '8px')};\n`;\n\nexport const NotFoundTitle = styled.div<StyledProps>`\n  display: flex;\n  align-items: center;\n  gap: 10px;\n  font-size: ${({ $size }) => ($size === 'large' ? '28px' : '14px')};\n  font-weight: ${({ $size }) => ($size === 'large' ? '700' : '400')};\n  color: ${({ theme }) => theme.colors['gray-400']};\n`;\n\nexport const NotFoundSubtitle = styled.div<StyledProps>`\n  font-weight: ${({ $size }) => ($size === 'large' ? '600' : '400')};\n  font-size: ${({ $size }) => ($size === 'large' ? '16px' : '14px')};\n  color: ${({ theme }) => theme.colors['gray-400']};\n`;\n","import { Eye, LucideIcon } from 'lucide-react';\nimport { Card } from '../';\nimport * as S from './NotFound.styles';\n\ninterface NotFoundProps {\n  title: string;\n  subtitle: string;\n  icon?: LucideIcon;\n  iconSize?: number;\n  size?: 'small' | 'large';\n  withCard?: boolean;\n}\n\nexport const NotFound = ({\n  title,\n  subtitle,\n  icon: IconComponent = Eye,\n  iconSize = 24,\n  size = 'large',\n  withCard = false,\n}: NotFoundProps) => {\n  const content = (\n    <S.NotFoundWrapper $size={size}>\n      <S.NotFoundIconWrapper $size={size}>\n        <IconComponent size={iconSize} />\n      </S.NotFoundIconWrapper>\n      <S.NotFoundContainer $size={size}>\n        <S.NotFoundTitle $size={size}>{title}</S.NotFoundTitle>\n        <S.NotFoundSubtitle $size={size}>{subtitle}</S.NotFoundSubtitle>\n      </S.NotFoundContainer>\n    </S.NotFoundWrapper>\n  );\n\n  if (withCard) {\n    return <Card width=\"medium\">{content}</Card>;\n  }\n\n  return content;\n};\n","import { CustomTheme } from '@/app/styles/theme';\nimport styled from '@emotion/styled';\n\nexport type SimpleCardHeight = 'small' | 'medium' | 'large';\nexport type ColorKey = keyof CustomTheme['colors'];\n\nconst SimpleCardStyles = {\n  simpleCard: (theme: CustomTheme, $height: SimpleCardHeight, $backgroundColor?: ColorKey) => `\n    display: flex;\n    width: 100%;\n    padding: 10px 16px;\n    background-color: ${$backgroundColor ? theme.colors[$backgroundColor] : theme.colors['gray-600_20']};\n    border-radius: 5px;\n    height: ${theme.typography.textAreaHeight[$height]};\n    color: ${theme.colors['gray-400']};\n    border: 1px solid ${theme.colors['gray-700']};\n    `,\n};\n\nexport const SimpleCard = styled.div<{ $height: SimpleCardHeight; $backgroundColor?: ColorKey }>`\n  ${({ theme, $height, $backgroundColor }) =>\n    SimpleCardStyles.simpleCard(theme, $height, $backgroundColor)}\n`;\n","import { SimpleCardHeight, ColorKey } from './SimpleCard.styles';\nimport * as S from './SimpleCard.styles';\n\ninterface SimpleCardProps {\n  height: SimpleCardHeight;\n  content: React.ReactNode;\n  backgroundColor?: ColorKey;\n}\n\nexport const SimpleCard = ({ height, content, backgroundColor }: SimpleCardProps) => {\n  return (\n    <S.SimpleCard $height={height} $backgroundColor={backgroundColor}>\n      {content}\n    </S.SimpleCard>\n  );\n};\n","import { theme } from '@/app/styles/theme';\nimport { keyframes } from '@emotion/react';\nimport styled from '@emotion/styled';\n\nconst shimmer = keyframes`\n  0% {\n    background-position: -200px 0;\n  }\n  100% {\n    background-position: calc(200px + 100%) 0;\n  }\n`;\n\nexport const SkeletonContainer = styled.div<{\n  width: string | number;\n  height: string | number;\n  borderRadius: string | number;\n}>`\n  width: ${({ width }) => (typeof width === 'number' ? `${width}px` : width)};\n  height: ${({ height }) => (typeof height === 'number' ? `${height}px` : height)};\n  border-radius: ${({ borderRadius }) =>\n    typeof borderRadius === 'number' ? `${borderRadius}px` : borderRadius};\n  background: linear-gradient(\n    90deg,\n    ${theme.colors['slate-800_60']} 25%,\n    ${theme.colors['gray-700']} 50%,\n    ${theme.colors['slate-800_60']} 75%\n  );\n  background-size: 200px 100%;\n  animation: ${shimmer} 4s ease-in-out infinite;\n`;\n\nexport const SkeletonTextContainer = styled.div<{ gap: string }>`\n  display: flex;\n  flex-direction: column;\n  gap: ${({ gap }) => gap};\n`;\n\nexport const SkeletonCardContent = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 16px;\n`;\n","import React from 'react';\nimport * as S from './Skeleton.styles';\n\ninterface SkeletonProps {\n  width?: string | number;\n  height?: string | number;\n  borderRadius?: string | number;\n  className?: string;\n}\n\nexport const Skeleton: React.FC<SkeletonProps> = ({\n  width = '100%',\n  height = '1rem',\n  borderRadius = '4px',\n  className,\n}) => {\n  return (\n    <S.SkeletonContainer\n      width={width}\n      height={height}\n      borderRadius={borderRadius}\n      className={className}\n    />\n  );\n};\n\ninterface SkeletonTextProps {\n  lines?: number;\n  lineHeight?: string;\n  gap?: string;\n}\n\nexport const SkeletonText: React.FC<SkeletonTextProps> = ({\n  lines = 1,\n  lineHeight = '1rem',\n  gap = '0.5rem',\n}) => {\n  return (\n    <S.SkeletonTextContainer gap={gap}>\n      {Array.from({ length: lines }).map((_, index) => (\n        <Skeleton key={index} height={lineHeight} width={index === lines - 1 ? '75%' : '100%'} />\n      ))}\n    </S.SkeletonTextContainer>\n  );\n};\n","import { theme } from '@/app/styles/theme';\nimport styled from '@emotion/styled';\n\nexport const SkeletonCard = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 15px;\n  width: ${theme.typography.cardWidth.medium};\n  padding: 20px 30px;\n  background-color: ${theme.colors['slate-800_60']};\n  border-radius: 10px;\n  border: 1px solid ${theme.colors['gray-700']};\n  word-break: keep-all;\n\n  @media (max-width: 768px) {\n    width: 90%;\n  }\n`;\n\nexport const SkeletonCardTitle = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 12px;\n`;\n\nexport const SkeletonTitleRow = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: flex-end;\n  gap: 4px;\n`;\n\nexport const SkeletonCardContent = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  margin-bottom: 10px;\n`;\n\nexport const SkeletonSection = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  margin-bottom: 10px;\n\n  &:last-child {\n    margin-bottom: 0;\n  }\n`;\n\nexport const SkeletonSectionHeader = styled.div`\n  display: flex;\n  align-items: center;\n  gap: 8px;\n`;\n\nexport const SkeletonContentHeader = styled.div`\n  display: flex;\n  align-items: center;\n  gap: 8px;\n`;\n\nexport const SkeletonSimpleCard = styled.div`\n  display: flex;\n  width: 100%;\n  padding: 10px 16px;\n  background-color: ${theme.colors['gray-600_20']};\n  border-radius: 5px;\n  height: ${theme.typography.textAreaHeight.small};\n  border: 1px solid ${theme.colors['gray-700']};\n  align-items: center;\n`;\n\nexport const SkeletonYellowCard = styled.div`\n  display: flex;\n  width: 100%;\n  padding: 10px 16px;\n  background-color: ${theme.colors['yellow-300_10']};\n  border-radius: 5px;\n  height: ${theme.typography.textAreaHeight.small};\n  border: 1px solid ${theme.colors['gray-700']};\n  align-items: center;\n`;\n\nexport const SkeletonCardAction = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n`;\n\nexport const SkeletonActionButtons = styled.div`\n  display: flex;\n  gap: 8px;\n`;\n\nexport const SkeletonEmojiContainer = styled.div`\n  display: flex;\n  gap: 8px;\n`;\n","import { Skeleton, SkeletonText } from '@/shared/ui/skeleton/Skeleton';\nimport React from 'react';\nimport * as S from './CommonSkeletonCard.styles';\n\ninterface CommonSkeletonCardProps {\n  variant?: 'moment' | 'comment';\n}\n\nexport const CommonSkeletonCard: React.FC<CommonSkeletonCardProps> = ({ variant = 'moment' }) => {\n  return (\n    <S.SkeletonCard>\n      <S.SkeletonCardTitle>\n        <S.SkeletonTitleRow>\n          <Skeleton width=\"16px\" height=\"16px\" borderRadius=\"50%\" />\n          <Skeleton width=\"120px\" height=\"16px\" />\n        </S.SkeletonTitleRow>\n        <SkeletonText lines={2} lineHeight=\"18px\" />\n      </S.SkeletonCardTitle>\n\n      {variant === 'moment' && (\n        <S.SkeletonCardContent>\n          <S.SkeletonContentHeader>\n            <Skeleton width=\"20px\" height=\"20px\" borderRadius=\"50%\" />\n            <Skeleton width=\"100px\" height=\"16px\" />\n          </S.SkeletonContentHeader>\n          <S.SkeletonSimpleCard>\n            <SkeletonText lines={1} lineHeight=\"16px\" />\n          </S.SkeletonSimpleCard>\n        </S.SkeletonCardContent>\n      )}\n\n      {variant === 'comment' && (\n        <>\n          <S.SkeletonSection>\n            <S.SkeletonSectionHeader>\n              <Skeleton width=\"20px\" height=\"20px\" borderRadius=\"50%\" />\n              <Skeleton width=\"100px\" height=\"16px\" />\n            </S.SkeletonSectionHeader>\n            <S.SkeletonSimpleCard>\n              <SkeletonText lines={2} lineHeight=\"16px\" />\n            </S.SkeletonSimpleCard>\n          </S.SkeletonSection>\n\n          <S.SkeletonSection>\n            <S.SkeletonSectionHeader>\n              <Skeleton width=\"20px\" height=\"20px\" borderRadius=\"50%\" />\n              <Skeleton width=\"120px\" height=\"16px\" />\n            </S.SkeletonSectionHeader>\n            <S.SkeletonYellowCard>\n              <SkeletonText lines={1} lineHeight=\"16px\" />\n            </S.SkeletonYellowCard>\n          </S.SkeletonSection>\n\n          <S.SkeletonSection>\n            <S.SkeletonSectionHeader>\n              <Skeleton width=\"20px\" height=\"20px\" borderRadius=\"50%\" />\n              <Skeleton width=\"100px\" height=\"16px\" />\n            </S.SkeletonSectionHeader>\n            <S.SkeletonEmojiContainer>\n              <Skeleton width=\"32px\" height=\"32px\" borderRadius=\"50%\" />\n              <Skeleton width=\"32px\" height=\"32px\" borderRadius=\"50%\" />\n              <Skeleton width=\"32px\" height=\"32px\" borderRadius=\"50%\" />\n            </S.SkeletonEmojiContainer>\n          </S.SkeletonSection>\n        </>\n      )}\n\n      {variant === 'moment' && (\n        <S.SkeletonCardAction>\n          <S.SkeletonActionButtons>\n            <Skeleton width=\"40px\" height=\"32px\" borderRadius=\"20px\" />\n            <Skeleton width=\"40px\" height=\"32px\" borderRadius=\"20px\" />\n            <Skeleton width=\"40px\" height=\"32px\" borderRadius=\"20px\" />\n          </S.SkeletonActionButtons>\n        </S.SkeletonCardAction>\n      )}\n    </S.SkeletonCard>\n  );\n};\n","import { CustomTheme } from '@/app/styles/theme';\nimport styled from '@emotion/styled';\n\nexport type textAreaHeight = 'small' | 'medium' | 'large';\n\nconst TextAreaStyles = {\n  textarea: (theme: CustomTheme, $height: textAreaHeight) => `\n    width: 100%;\n    padding: 20px;\n    background-color: ${theme.colors['gray-600_20']};\n    border-radius: 5px;\n    height: ${theme.typography.textAreaHeight[$height]};\n    color: ${theme.colors.white};\n    border: 1px solid ${theme.colors['gray-700']};\n    resize: none; \n    \n    &::placeholder {\n        color: ${theme.colors.white};\n    }\n    `,\n};\n\nexport const TextArea = styled.textarea<{ $height: textAreaHeight }>`\n  ${({ theme, $height }) => TextAreaStyles.textarea(theme, $height)}\n`;\n","import { textAreaHeight } from './TextArea.styles';\nimport * as S from './TextArea.styles';\n\ninterface TextAreaProps extends React.TextareaHTMLAttributes<HTMLTextAreaElement> {\n  placeholder: string;\n  height: textAreaHeight;\n}\n\nexport const TextArea = ({ placeholder, height, ...props }: TextAreaProps) => {\n  return <S.TextArea placeholder={placeholder} $height={height} {...props} />;\n};\n","import { CustomTheme } from '@/app/styles/theme';\nimport { keyframes } from '@emotion/react';\nimport styled from '@emotion/styled';\n\nexport type ToastVariant = 'success' | 'error';\n\nconst slideIn = keyframes`\n  from {\n    transform: translateX(100%);\n    opacity: 0;\n  }\n  to {\n    transform: translateX(0);\n    opacity: 1;\n  }\n`;\n\nconst slideOut = keyframes`\n  from {\n    transform: translateX(0);\n    opacity: 1;\n  }\n  to {\n    transform: translateX(100%);\n    opacity: 0;\n  }\n`;\n\nconst toastVariants = {\n  success: (theme: CustomTheme) => `\n    background-color: ${theme.colors['emerald-50']};\n    border-left: 4px solid ${theme.colors['emerald-500']};\n    color: ${theme.colors['emerald-600']};\n  `,\n  error: (theme: CustomTheme) => `\n    background-color: color-mix(in srgb, ${theme.colors['red-500']} 10%, transparent);\n    border-left: 4px solid ${theme.colors['red-500']};\n    color: ${theme.colors['red-500']};\n  `,\n};\n\nexport const ToastContainer = styled.div`\n  position: fixed;\n  top: 20px;\n  right: 20px;\n  z-index: 9999;\n  display: flex;\n  flex-direction: column;\n  gap: 12px;\n  max-width: 400px;\n  width: 100%;\n\n  @media (max-width: 768px) {\n    right: 10px;\n    left: 10px;\n    max-width: none;\n  }\n`;\n\nexport const ToastItem = styled.div<{\n  variant: ToastVariant;\n  isExiting?: boolean;\n}>`\n  ${({ theme, variant }) => toastVariants[variant](theme)};\n  padding: 16px 20px;\n  border-radius: 8px;\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);\n  display: flex;\n  align-items: center;\n  gap: 12px;\n  font-size: 14px;\n  font-weight: 500;\n  position: relative;\n  animation: ${({ isExiting }) => (isExiting ? slideOut : slideIn)} 0.3s ease-out forwards;\n  backdrop-filter: blur(8px);\n  min-height: 60px;\n\n  @media (max-width: 768px) {\n    padding: 14px 16px;\n    font-size: 13px;\n    min-height: 56px;\n  }\n`;\n\nexport const ToastIconWrapper = styled.div`\n  flex-shrink: 0;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n`;\n\nexport const ToastMessage = styled.div`\n  flex: 1;\n  line-height: 1.4;\n`;\n\nexport const CloseButton = styled.button`\n  background: none;\n  border: none;\n  cursor: pointer;\n  padding: 4px;\n  border-radius: 4px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  opacity: 0.7;\n  transition: opacity 0.2s ease;\n  flex-shrink: 0;\n\n  &:hover {\n    opacity: 1;\n  }\n\n  &:focus {\n    outline: 2px solid currentColor;\n    outline-offset: 2px;\n  }\n`;\n"],"names":[],"sourceRoot":""}